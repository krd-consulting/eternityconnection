<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function simplicity_pack_install() {


// Any themes without keys here will get numeric keys and so will be enabled,
// but not placed into variables.
    $enable = array(
        'theme_default' => 'simplicity',
     //   'admin_theme' => 'seven'
     );

    theme_enable($enable);

    foreach ($enable as $var => $theme) {
        if (!is_numeric($var)) {
            variable_set($var, $theme);
        }
    }

    // Disable the default Bartik theme
    theme_disable(array('bartik','seven'));




    // Add text formats.
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 1,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // HTML filter.
            'filter_html' => array(
                'weight' => 1,
                'status' => 1,
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 2,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);

    $full_html_format = array(
        'format' => 'full_html',
        'name' => 'Full HTML',
        'weight' => 0,
        'filters' => array(
            // URL filter.
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            // Line break filter.
            'filter_autop' => array(
                'weight' => 1,
                'status' => 1,
            ),
            // HTML corrector filter.
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
        ),
    );
    $full_html_format = (object) $full_html_format;
    filter_format_save($full_html_format);

    // Enable some simplicity blocks.
    $default_theme = 'simplicity';
    $admin_theme = 'seven';
    $values = array(
        array(
            'module' => 'views',
            'delta' => 'flexslider_slideshow-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'hero',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => '<none>',
            'cache' => -1,
        ),array(
            'module' => 'views',
            'delta' => 'quotes_block-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'quotes',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => '<none>',
            'cache' => -1,
        ),array(
            'module' => 'views',
            'delta' => 'simplicity_user_tweets-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'tweets_area',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => 'Twitter activity',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'blocks-block_3',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'content',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => '<none>',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'filter_controls-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 1,
            'region' => 'third_content',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => 'Our work',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'tag_cloud-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_second',
            'visibility' => 1,
            'pages' => 'blog/*
taxonomy/*',
            'title' => 'Blog topics - Tag cloud',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'categories-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_second',
            'visibility' => 1,
            'pages' => 'blog/*
taxonomy/*',
            'title' => 'Post Categories',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'tag_cloud-block_1',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_first',
            'visibility' => 1,
            'pages' => 'blog-left-sidebar',
            'title' => 'Blog topics - Tag cloud',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'categories-block_1',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'sidebar_first',
            'visibility' => 1,
            'pages' => 'blog-left-sidebar',
            'title' => 'Post Categories',
            'cache' => -1,
        ),
        array(
            'module' => 'views',
            'delta' => 'work-block',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 1,
            'region' => 'third_content',
            'visibility' => 1,
            'pages' => '<front>',
            'title' => '<none>',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'main-menu',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 0,
            'region' => 'navigation',
            'visibility' => 0,
            'pages' => '',
            'title' => '<none>',
            'cache' => -1,
        ),
        array(
            'module' => 'system',
            'delta' => 'main',
            'theme' => $default_theme,
            'status' => 1,
            'weight' => 1,
            'region' => 'content',
            'visibility' => 0,
            'pages' => '',
            'title' => '<none>',
            'cache' => -1,
        ),
    );
    $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'visibility', 'region', 'pages', 'title', 'cache'));
    foreach ($values as $record) {
        $query->values($record);
    }
    $query->execute();

    // Insert default pre-defined node types into the database. For a complete
    // list of available node type attributes, refer to the node type API
    // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
    $types = array(
        array(
            'type' => 'page',
            'name' => st('Basic page'),
            'base' => 'node_content',
            'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
        array(
            'type' => 'article',
            'name' => st('Article'),
            'base' => 'node_content',
            'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );

    foreach ($types as $type) {
        $type = node_type_set_defaults($type);
        node_type_save($type);
        node_add_body_field($type);
    }

    // Insert default pre-defined RDF mapping into the database.
    $rdf_mappings = array(
        array(
            'type' => 'node',
            'bundle' => 'page',
            'mapping' => array(
                'rdftype' => array('foaf:Document'),
            ),
        ),
        array(
            'type' => 'node',
            'bundle' => 'article',
            'mapping' => array(
                'field_image' => array(
                    'predicates' => array('og:image', 'rdfs:seeAlso'),
                    'type' => 'rel',
                ),
                'field_tags' => array(
                    'predicates' => array('dc:subject'),
                    'type' => 'rel',
                ),
            ),
        ),
    );
    foreach ($rdf_mappings as $rdf_mapping) {
        rdf_mapping_save($rdf_mapping);
    }

    // Default "Basic page" to not be promoted and have comments disabled.
    variable_set('node_options_page', array('status'));
    variable_set('comment_page', COMMENT_NODE_HIDDEN);

    // Don't display date and author information for "Basic page" nodes by default.
    variable_set('node_submitted_page', FALSE);

    // Enable user picture support and set the default to a square thumbnail option.
    variable_set('user_pictures', '1');
    variable_set('user_picture_dimensions', '1024x1024');
    variable_set('user_picture_file_size', '800');
    variable_set('user_picture_style', 'thumbnail');

    // Allow visitor account creation with administrative approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

    // Create a default vocabulary named "Tags", enabled for the 'article' content type.
    $description = st('Use tags to group articles on similar topics into categories.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
                'name' => st('Tags'),
                'description' => $description,
                'machine_name' => 'tags',
                'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);

    $field = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'type' => 'taxonomy_term_reference',
        // Set cardinality to unlimited for tagging.
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'settings' => array(
            'allowed_values' => array(
                array(
                    'vocabulary' => $vocabulary->machine_name,
                    'parent' => 0,
                ),
            ),
        ),
    );
    field_create_field($field);

    $instance = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'entity_type' => 'node',
        'label' => 'Tags',
        'bundle' => 'article',
        'description' => $vocabulary->help,
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
            'weight' => -4,
        ),
        'display' => array(
            'default' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
            'teaser' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
        ),
    );
    field_create_instance($instance);


    // Create an image field named "Image", enabled for the 'article' content type.
    // Many of the following values will be defaulted, they're included here as an illustrative examples.
    // See http://api.drupal.org/api/function/field_create_field/7

    $field = array(
        'field_name' => 'field_image',
        'type' => 'image',
        'cardinality' => 1,
        'translatable' => TRUE,
        'locked' => FALSE,
        'indexes' => array('fid' => array('fid')),
        'settings' => array(
            'uri_scheme' => 'public',
            'default_image' => FALSE,
        ),
        'storage' => array(
            'type' => 'field_sql_storage',
            'settings' => array(),
        ),
    );
    field_create_field($field);


    // Many of the following values will be defaulted, they're included here as an illustrative examples.
    // See http://api.drupal.org/api/function/field_create_instance/7
    $instance = array(
        'field_name' => 'field_image',
        'entity_type' => 'node',
        'label' => 'Image',
        'bundle' => 'article',
        'description' => st('Upload an image to go with this article.'),
        'required' => FALSE,
        'settings' => array(
            'file_directory' => 'field/image',
            'file_extensions' => 'png gif jpg jpeg',
            'max_filesize' => '',
            'max_resolution' => '',
            'min_resolution' => '',
            'alt_field' => TRUE,
            'title_field' => '',
        ),
        'widget' => array(
            'type' => 'image_image',
            'settings' => array(
                'progress_indicator' => 'throbber',
                'preview_image_style' => 'thumbnail',
            ),
            'weight' => -1,
        ),
        'display' => array(
            'default' => array(
                'label' => 'hidden',
                'type' => 'image',
                'settings' => array('image_style' => 'large', 'image_link' => ''),
                'weight' => -1,
            ),
            'teaser' => array(
                'label' => 'hidden',
                'type' => 'image',
                'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
                'weight' => -1,
            ),
        ),
    );
    field_create_instance($instance);

    // Enable default permissions for system roles.
    $filtered_html_permission = filter_permission_name($filtered_html_format);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

    //Enable Contact Form for Anonymous users
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access site-wide contact form'));

    // Create a default role for site administrators, with all available permissions assigned.
    $admin_role = new stdClass();
    $admin_role->name = 'administrator';
    $admin_role->weight = 2;
    user_role_save($admin_role);
    user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
    // Set this as the administrator role.
    variable_set('user_admin_role', $admin_role->rid);

    // Assign user 1 the "administrator" role.
    db_insert('users_roles')
            ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
            ->execute();
/*
    // Create a default role for site owners, with all available permissions assigned.
    $owner_role = new stdClass();
    $owner_role->name = 'owner';
    $owner_role->weight = 2;
    user_role_save($owner_role);

    user_role_grant_permissions($owner_role->rid, array('administer contact forms', 'access site-wide contact form', 'use text format full_html', 'access content overview', 'view own unpublished content', 'view revisions', 'create article content', 'create block content', 'create hp_slide content', 'create page content', 'delete any article content', 'delete any block content', 'delete any hp_slide content', 'delete any page content', 'edit any article content', 'edit any block content', 'edit any galeria content', 'edit any hp_slide content', 'edit any page content', 'access overlay', 'create url aliases', 'search content', 'use advanced search', 'administer themes', 'view the administration theme', 'access toolbar', 'access administration pages', 'administer main-menu menu items', 'administer site information', 'display site configuration menu','display site building menu'));

    // Assign user 1 the "administrator" role.s
    db_insert('users_roles')
            ->fields(array('uid' => 2, 'rid' => $owner_role->rid))
            ->execute();*/

    //Enable Search form to be used by Anonymous users (role 1)
    //user_role_grant_permissions(1, array('search content'));


    //Definir numero de posts na front page
    variable_set('default_nodes_main', 1);

    global $base_url;

    // Create a Home link in the main menu.
    $item = array(
        'link_title' => st('Home'),
        'link_path' => '<front>',
        'menu_name' => 'main-menu',
        'weight' => 0,
    );
    menu_link_save($item);

   /* $item = array(
        'link_title' => st('About'),
        'link_path' => $base_url.'#main_container',
        'menu_name' => 'main-menu',
        'weight' => 1,
    );
    menu_link_save($item);*/

   /* $item = array(
        'link_title' => st('Shortcoding'),
        'link_path' => 'content/shortcodes-included',
        'menu_name' => 'main-menu',
        'weight' => 2,
    );
    menu_link_save($item);*/

    $item = array(
        'link_title' => st('Work'),
        'link_path' => 'portfolio',
        'menu_name' => 'main-menu',
        'weight' => 3,
    );
    $work_lid = menu_link_save($item);

    $item = array(
        'link_title' => st('Work 4 columns'),
        'link_path' => 'portfolio',
        'menu_name' => 'main-menu',
        'weight' => 0,
        'plid' => $work_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Work 3 columns'),
        'link_path' => 'portfolio-3-cols',
        'menu_name' => 'main-menu',
        'weight' => 1,
        'plid' => $work_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Work masonry'),
        'link_path' => 'portfolio-masonry',
        'menu_name' => 'main-menu',
        'weight' => 0,
        'plid' => $work_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Blog'),
        'link_path' => 'blog/1',
        'menu_name' => 'main-menu',
        'weight' => 4,
    );
    $blog_lid = menu_link_save($item);

    $item = array(
        'link_title' => st('Blog sidebar right'),
        'link_path' => 'blog/1',
        'menu_name' => 'main-menu',
        'weight' => 1,
        'plid' => $blog_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Blog sidebar left'),
        'link_path' => 'blog-left-sidebar',
        'menu_name' => 'main-menu',
        'weight' => 2,
        'plid' => $blog_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Blog 2 columns'),
        'link_path' => 'blog-2-cols',
        'menu_name' => 'main-menu',
        'weight' => 3,
        'plid' => $blog_lid,
    );
    menu_link_save($item);

    $item = array(
        'link_title' => st('Blog 3 columns'),
        'link_path' => 'blog-3-cols',
        'menu_name' => 'main-menu',
        'weight' => 4,
        'plid' => $blog_lid,
    );
    menu_link_save($item);

    $item_contact = array(
        'link_title' => st('Contact'),
        'link_path' => 'contact',
        'menu_name' => 'main-menu',
        'weight' => 5,
    );
    menu_link_save($item_contact);

    // Update the menu router information.
    menu_rebuild();

    // Enable the admin theme.
    db_update('system')
            ->fields(array('status' => 1))
            ->condition('type', 'theme')
            ->condition('name', 'seven')
            ->execute();
    variable_set('admin_theme', 'seven');
    variable_set('node_admin_theme', '1');
}
