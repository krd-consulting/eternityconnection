<?php


/**
 * Implements hook_menu().
 */
function appointment_product_menu () {
  $items['payment-confirmation-page/%'] = array(
    'title' => 'Payment Confirmation Page',
    'page callback' => 'appointment_product_payment_confirmation_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function appointment_product_payment_confirmation_page($nid = '') {
  global $user;

  if (!civicrm_initialize()) {return;}
  if (empty($nid) || !is_numeric($nid)) return;
  $node = node_load($nid);
  $lang = $node->language;

  $result = civicrm_api3('Contribution', 'create', array(
    'sequential' => 1,
    'financial_type_id' => "1",
    'total_amount' => $node->field_appointment_price[$lang][0]['amount'] / 100,
    'source' => $node->title,
    'currency' => $node->field_appointment_price[$lang][0]['currency_code'],
    'contact_id' => $user->uid,

  ));
  echo 'Created civiContribution for node id' . check_plain($nid);
  #dpm ($result);

  // Update source node at successful payment.
  $node->event_calendar_status[$lang][0]['tid'] = 31;
  node_save($node);
}




function appointment_product_preprocess_page(&$vars) {
  if (isset($vars['node'])) {
    $node = $vars['node'];
    if($node->type == 'event_calendar') {
      $lang = $node->language;
      if ($node->event_calendar_status[$lang][0]['tid'] == 31) {
        $vars['title_prefix']['appointment_product']['#markup'] = '<div class="title-badge" style="
  float:left;
  background:#22b24c;
  color:white;
  padding: 10px;
  font-size:18px;
  border-radius: 4px;
  margin-right: 5px;
  ">Booked</div>';
      }
    }
  }
}

function appointment_product_create_related_product($node)  {
  // @todo save node ID.
  global $user;
  if (isset($node->bbb)) {
    $lang = $node->language;
    $cp = commerce_product_load_by_sku($node->nid);
    if (empty($cp)) {
      $cp = commerce_product_new('product');
      $cp->is_new = TRUE;
      $cp->revision_id = NULL;
      $cp->uid = $user->uid;
      $cp->status = 1;
      $cp->created = $cp->changed = time();
      $cp->sku = $node->nid;
      $cp->language = $lang;
    }

    if ($cp->title != $node->title
      || $node->field_appointment_price[$lang][0]['amount'] != $cp->commerce_price[$lang][0]['amount'])
    {
      $cp->title = $node->title;
      $cp->changed = time();
      $cp->commerce_price = array(
        $lang => array(
          0 => array(
            'amount' => $node->field_appointment_price[$lang][0]['amount'],
            'currency_code' => $node->field_appointment_price[$lang][0]['currency_code'],
          )
        )
      );
      commerce_product_save($cp);
    }
    if ($node->field_appointment_product[$lang][0]['product_id'] != $cp->product_id) {
      $node->field_appointment_product[$lang][0]['product_id'] = $cp->product_id;
      node_save($node);
    }
  }
}



/**
 * Implements hook_node_insert().
 * @see http://polso.info/how-create-drupal-commerce-products-programmatically
 */
function appointment_product_node_insert($node) {
  appointment_product_create_related_product($node);
}

function appointment_product_node_update($node) {
  dpm('update');
  appointment_product_create_related_product($node);
}


/**
 * Implements hook_entity_update().
 */
function appointment_product_entity_update($entity, $type) {
  if ($type == 'commerce_product') {
    $node = node_load($entity->sku);
    // Sync price back to node.
    $lang = $entity->language;
    if ($node->field_appointment_price[$lang][0]['amount'] != $entity->commerce_price[$lang][0]['amount'])
    {
      $node->changed = time();
      $node->field_appointment_price[$lang][0]['amount'] = $entity->commerce_price[$lang][0]['amount'];
      node_save($node);
    }
  }
}

